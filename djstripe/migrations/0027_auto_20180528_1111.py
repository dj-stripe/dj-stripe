# -*- coding: utf-8 -*-
# Generated by Django 2.0.5 on 2018-05-28 08:11

from django.db import migrations
import djstripe.enums
import djstripe.fields


class Migration(migrations.Migration):

    dependencies = [
        ('djstripe', '0026_refund'),
    ]

    operations = [
        migrations.AlterField(
            model_name='account',
            name='type',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.AccountType, help_text='The Stripe account type.', max_length=8),
        ),
        migrations.AlterField(
            model_name='bankaccount',
            name='account_holder_type',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.BankAccountHolderType, help_text='The type of entity that holds the account.', max_length=10),
        ),
        migrations.AlterField(
            model_name='bankaccount',
            name='status',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.BankAccountStatus, max_length=19),
        ),
        migrations.AlterField(
            model_name='card',
            name='address_line1_check',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.CardCheckResult, help_text='If `address_line1` was provided, results of the check.', max_length=11, null=True),
        ),
        migrations.AlterField(
            model_name='card',
            name='address_zip_check',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.CardCheckResult, help_text='If `address_zip` was provided, results of the check.', max_length=11, null=True),
        ),
        migrations.AlterField(
            model_name='card',
            name='brand',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.CardBrand, help_text='Card brand.', max_length=16),
        ),
        migrations.AlterField(
            model_name='card',
            name='cvc_check',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.CardCheckResult, help_text='If a CVC was provided, results of the check.', max_length=11, null=True),
        ),
        migrations.AlterField(
            model_name='card',
            name='funding',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.CardFundingType, help_text='Card funding type.', max_length=7),
        ),
        migrations.AlterField(
            model_name='card',
            name='tokenization_method',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.CardTokenizationMethod, help_text='If the card number is tokenized, this is the method that was used.', max_length=11, null=True),
        ),
        migrations.AlterField(
            model_name='charge',
            name='failure_code',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.ApiErrorCode, help_text='Error code explaining reason for charge failure if available.', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='charge',
            name='source_type',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.LegacySourceType, help_text='The payment source type. If the payment source is supported by dj-stripe, a corresponding model is attached to this Charge via a foreign key matching this field.', max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name='charge',
            name='status',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.ChargeStatus, help_text='The status of the payment.', max_length=9),
        ),
        migrations.AlterField(
            model_name='coupon',
            name='duration',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.CouponDuration, help_text='Describes how long a customer who applies this coupon will get the discount.', max_length=9),
        ),
        migrations.AlterField(
            model_name='dispute',
            name='reason',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.DisputeReason, max_length=25),
        ),
        migrations.AlterField(
            model_name='dispute',
            name='status',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.DisputeStatus, max_length=22),
        ),
        migrations.AlterField(
            model_name='fileupload',
            name='purpose',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.FileUploadPurpose, help_text='The purpose of the uploaded file.', max_length=24),
        ),
        migrations.AlterField(
            model_name='fileupload',
            name='type',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.FileUploadType, help_text='The type of the file returned.', max_length=4),
        ),
        migrations.AlterField(
            model_name='invoice',
            name='billing',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.InvoiceBilling, help_text='When charging automatically, Stripe will attempt to pay this invoiceusing the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.', max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='payout',
            name='failure_code',
            field=djstripe.fields.StripeEnumField(blank=True, enum=djstripe.enums.PayoutFailureCode, help_text='Error code explaining reason for transfer failure if available. See https://stripe.com/docs/api/python#transfer_failures.', max_length=23, null=True),
        ),
        migrations.AlterField(
            model_name='payout',
            name='method',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.PayoutMethod, help_text='The method used to send this payout. `instant` is only supported for payouts to debit cards.', max_length=8),
        ),
        migrations.AlterField(
            model_name='payout',
            name='status',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.PayoutStatus, help_text='Current status of the payout. A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. I t will then change to paid if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.', max_length=10),
        ),
        migrations.AlterField(
            model_name='payout',
            name='type',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.PayoutType, max_length=12),
        ),
        migrations.AlterField(
            model_name='plan',
            name='aggregate_usage',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.PlanAggregateUsage, help_text='Specifies a usage aggregation strategy for plans of usage_type=metered. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for picking the last usage record reported within a period, `last_ever` for picking the last usage record ever (across period bounds) or max which picks the usage record with the maximum reported usage during a period. Defaults to `sum`.', max_length=18, null=True),
        ),
        migrations.AlterField(
            model_name='plan',
            name='billing_scheme',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.PlanBillingScheme, help_text='Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in amount) will be charged per unit in quantity (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the tiers and tiers_mode attributes.', max_length=8, null=True),
        ),
        migrations.AlterField(
            model_name='plan',
            name='interval',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.PlanInterval, help_text='The frequency with which a subscription should be billed.', max_length=5),
        ),
        migrations.AlterField(
            model_name='plan',
            name='tiers_mode',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.PlanTiersMode, help_text='Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price, in `graduated` tiering pricing can successively change as the quantity grows.', max_length=9, null=True),
        ),
        migrations.AlterField(
            model_name='plan',
            name='usage_type',
            field=djstripe.fields.StripeEnumField(default='licensed', enum=djstripe.enums.PlanUsageType, help_text='Configures how the quantity per period should be determined, can be either`metered` or `licensed`. `licensed` will automatically bill the `quantity` set for a plan when adding it to a subscription, `metered` will aggregate the total usage based on usage records. Defaults to `licensed`.', max_length=8),
        ),
        migrations.AlterField(
            model_name='product',
            name='type',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.ProductType, help_text='The type of the product. The product is either of type `good`, which is eligible for use with Orders and SKUs, or `service`, which is eligible for use with Subscriptions and Plans.', max_length=7),
        ),
        migrations.AlterField(
            model_name='refund',
            name='failure_reason',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.RefundFailureReason, help_text='If the refund failed, the reason for refund failure if known.', max_length=24, null=True),
        ),
        migrations.AlterField(
            model_name='refund',
            name='reason',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.RefundReason, help_text='Reason for the refund.', max_length=21, null=True),
        ),
        migrations.AlterField(
            model_name='refund',
            name='status',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.RefundFailureReason, help_text='Status of the refund.', max_length=24),
        ),
        migrations.AlterField(
            model_name='source',
            name='flow',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.SourceFlow, help_text='The authentication flow of the source.', max_length=17),
        ),
        migrations.AlterField(
            model_name='source',
            name='status',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.SourceStatus, help_text='The status of the source. Only `chargeable` sources can be used to create a charge.', max_length=10),
        ),
        migrations.AlterField(
            model_name='source',
            name='type',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.SourceType, help_text='The type of the source.', max_length=19),
        ),
        migrations.AlterField(
            model_name='source',
            name='usage',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.SourceUsage, help_text='Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while other may leave the option at creation.', max_length=10),
        ),
        migrations.AlterField(
            model_name='subscription',
            name='billing',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.InvoiceBilling, help_text='Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions.', max_length=20),
        ),
        migrations.AlterField(
            model_name='subscription',
            name='status',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.SubscriptionStatus, help_text='The status of this subscription.', max_length=8),
        ),
        migrations.AlterField(
            model_name='transfer',
            name='failure_code',
            field=djstripe.fields.StripeEnumField(blank=True, enum=djstripe.enums.PayoutFailureCode, help_text='Error code explaining reason for transfer failure if available. See https://stripe.com/docs/api/python#transfer_failures.', max_length=23, null=True),
        ),
        migrations.AlterField(
            model_name='transfer',
            name='source_type',
            field=djstripe.fields.StripeEnumField(enum=djstripe.enums.LegacySourceType, help_text='The source balance from which this transfer came.', max_length=16),
        ),
        migrations.AlterField(
            model_name='transfer',
            name='status',
            field=djstripe.fields.StripeEnumField(blank=True, enum=djstripe.enums.PayoutStatus, help_text='The current status of the transfer. A transfer will be pending until it is submitted to the bank, at which point it becomes in_transit. It will then change to paid if the transaction goes through. If it does not go through successfully, its status will change to failed or canceled.', max_length=10, null=True),
        ),
    ]
