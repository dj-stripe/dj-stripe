# Generated by Django 2.2.4 on 2019-08-17 00:53

from django.db import migrations, models

import djstripe.enums
import djstripe.fields


class Migration(migrations.Migration):

    dependencies = [("djstripe", "0007_auto_20190804_0539")]

    operations = [
        migrations.AlterField(
            model_name="paymentintent",
            name="last_payment_error",
            field=djstripe.fields.JSONField(
                blank=True,
                help_text="The payment error encountered in the previous PaymentIntent confirmation.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="paymentintent",
            name="next_action",
            field=djstripe.fields.JSONField(
                blank=True,
                help_text="If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.",
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="paymentintent",
            name="receipt_email",
            field=models.CharField(
                blank=True,
                help_text="Email address that the receipt for the resulting payment will be sent to.",
                max_length=255,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="paymentintent",
            name="setup_future_usage",
            field=djstripe.fields.StripeEnumField(
                blank=True,
                enum=djstripe.enums.IntentUsage,
                help_text="Indicates that you intend to make future payments with this PaymentIntentâ€™s payment method. If present, the payment method used with this PaymentIntent can be attached to a Customer, even after the transaction completes. Use `on_session` if you intend to only reuse the payment method when your customer is present in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. Stripe uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules. For example, if your customer is impacted by SCA, using `off_session` will ensure that they are authenticated while processing this PaymentIntent. You will then be able to make later off-session payments for this customer.",
                max_length=11,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="paymentintent",
            name="status",
            field=djstripe.fields.StripeEnumField(
                enum=djstripe.enums.PaymentIntentStatus,
                help_text="Status of this PaymentIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, requires_capture, canceled, or succeeded. You can read more about PaymentIntent statuses here.",
                max_length=23,
            ),
        ),
        migrations.AlterField(
            model_name="setupintent",
            name="status",
            field=djstripe.fields.StripeEnumField(
                enum=djstripe.enums.SetupIntentStatus,
                help_text="Status of this SetupIntent, one of requires_payment_method, requires_confirmation, requires_action, processing, canceled, or succeeded.",
                max_length=23,
            ),
        ),
    ]
