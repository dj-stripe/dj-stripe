name: CI tests

on:
  push:
    paths-ignore:
      - "docs/**"
      - "pyproject.toml"
      - "mkdocs.yml"
      - ".readthedocs.yml"
      - ".github/workflows/docs.yml"

  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]

env:
  POETRY_VERSION: "1.2.2"
  POETRY_VIRTUALENVS_IN_PROJECT: "1"

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: djstripe
          POSTGRES_DB: djstripe
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: djstripe
          MYSQL_DATABASE: djstripe
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        run: |
          curl -sL https://install.python-poetry.org | python - --version ${{ env.POETRY_VERSION }}

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install --with ci

      - name: Test with tox for ${{ matrix.python-version }}
        run: poetry run tox

      - name: Convert coverage
        run: poetry run coverage xml
