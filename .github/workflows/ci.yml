name: CI tests

on:
  push:
    paths-ignore:
      - 'docs/**'
      - 'pyproject.toml'
      - 'mkdocs.yml'
      - 'codecov.yml'
      - '.readthedocs.yml'
      - '.github/workflows/docs.yaml'

  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
    paths-ignore:
      - 'docs/**'
      - 'pyproject.toml'
      - 'mkdocs.yml'
      - 'codecov.yml'
      - '.readthedocs.yml'
      - '.github/workflows/docs.yaml'

env:
  POETRY_VERSION: "1.1.11"
  POETRY_VIRTUALENVS_IN_PROJECT: "1"


jobs:

  tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: djstripe
          POSTGRES_DB: djstripe
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: djstripe
          MYSQL_DATABASE: djstripe
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3.1.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Install poetry (${{ env.POETRY_VERSION }}) binary on runner
      run: |
        curl -sL https://install.python-poetry.org | python - --version ${{ env.POETRY_VERSION }}

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Ensure cache is healthy
      if: steps.cache.outputs.cache-hit == 'true'
      run: timeout 10s poetry run pip --version || rm -rf .venv

    - name: Install dependencies
      run: |
        poetry run python -m pip install --upgrade pip setuptools wheel
        poetry run python -m pip install coverage[toml] tox tox-gh-actions codecov

    - name: Test with tox for ${{ matrix.python-version }}
      run: poetry run python -m tox

    - name: Convert coverage
      run: poetry run python -m coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: true
        files: ./coverage.xml
