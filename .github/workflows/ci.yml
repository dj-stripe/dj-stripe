name: CI tests

on:
  push:
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: python -m pip install flake8 isort black . djangorestframework
      - name: Install and Run Pre-commit 
        uses: pre-commit/action@v2.0.3
      - name: Check for missing migrations
        run: python manage.py makemigrations --check --dry-run
        env:
          DJSTRIPE_TEST_DB_VENDOR: sqlite

#  todo remove lint job and manage everything in tox.ini
#  todo remove docs job and manage everything in tox.ini

  docs:
    runs-on: ubuntu-latest
    needs: ["lint"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: python -m pip install .[docs]
      - name: Build documentation
        run: mkdocs build
        env:
          DJANGO_SETTINGS_MODULE: docs.django_settings
          PYTHONPATH: "."

  tests:
    runs-on: ubuntu-latest
    needs: ["lint", "docs"]
    strategy:
      fail-fast: true
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]

    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: djstripe
          POSTGRES_DB: djstripe
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: djstripe
          MYSQL_DATABASE: djstripe
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install coverage[toml] tox tox-gh-actions codecov

    - name: Test with tox for ${{ matrix.python-version }}
      run: python -m tox
    
    - name: Convert coverage
      run: python -m coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        fail_ci_if_error: true
        files: ./coverage.xml
